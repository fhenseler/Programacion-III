Pasos para el parcial

===========================================================================================
================API REST Y BASE DE DATOS===================================================
===========================================================================================
		

1)
clonar el repositorio de la apirest con
git clone https://github.com/NicoCabrera/APIREST-PHP-POO-JWT-MIDDLEWARE-Documentar.git

2)
Dentro de la carpeta APIREST-PHP-POO-JWT-MIDDLEWARE-Documentar/apirest crear un directorio
llamado uploads

3)
Encender el xampp

4)
Probarlo con POSTMAN. Ejemplo de como llamar a algunas:
http://localhost/APIREST-PHP-POO-JWT-MIDDLEWARE-Documentar/apirest/user/

http://localhost/APIREST-PHP-POO-JWT-MIDDLEWARE-Documentar/apirest/user/1231

5) Crear la base de datos. Tener en cuenta:
	A) El nombre de la base de datos que se encuentra
	referenciado en el archivo apirest/classes/AccesoDatos.php

	B) Agregar a la tabla el campo "photo" aunque no lo pida explicitamente
	   el enunciado.

	C) Modificar la clase "user.php", sus atributos que coincidan con la tabla.
	  (Anotar esos campos en un notepad y tenerlo a mano. Lo vamos a mirar un
	  par de veces mas)

	D) Los campos de la tabla que vamos a utilizar. Ya que habria
	que modificar lo siguiente en el archivo user.php y userApi.php:

		- Método 'getAllUsers':
		  Primero menciona la tabla users. Cambiar de tabla si es necesario.
		  Luego hace fetchAll de la clase "user" por lo tanto lo campos que
		  no existan en dicha tabla pero que estan en la clase van a ser
		  considerados como "null" en su valor, pero no rompe.
		  (Checkequer mediante POSTMAN si el metodo trae el array vacio.
		   Luego insertar a mano un item y ver su estructura)

		- Metodo "insertUser":
		  Antes de entrar al método, instancia un User (desde userApi.php).
	          Hay que tomar todos los datos y asignarlos a la nueva instancia.
		  Para eso, el clase User debe tener todos los campos necesarios.
		  Es decir, los mismos campos que tiene la tabla.

		  Luego en "insertUser" modificar la CONSULTA incluyendo
		  el nombre de la TABLA, los CAMPOS y los bindValue.

		  (Probar en POSTMAN con el path user/add.
		   Si tira un error desde el POSTMAN es porque la tabla no tiene
		   algunos de los campos, asegurarse de eso)

		  Los datos que viajan por http deben ir obligatoriamente por POST
		  y dentro del body con la clave correspondiente.

		 -Metodo 'delete':
	          Primero en 'delete' de userApi.php hay que tomar el id de la entidad.
		  Ese id lo utiliza para instanciar un objeto de la clase User.
		  Asegurarnos de cómo identificamos a ese campo en la clase, tabla y body.

		  Luego tener en cuenta que a qué tabla deberia apunta "deleteUser"
		  y ojo con la sintaxis en los strings. 

		  (El delete va por POST del http)

		- Para leer un usuario se pasa el id por la url ya que va por GET.
	          En user.php asegurarnos que apuntamos a la tabla que corresponde

		- Metodo "update":
		  En update de userApi hay que asegurarnos de tomar todos los datos
		  que vienen por http incluido el id.
	          Incluir el codigo para que actualice la foto.
		  En updateUser del user.php incluir los campos que se incluyeron
	 	  en el paso del insert en los bindValue y modificar la Query.

		  (Para verificar si actualiza correctamente, abrir dos pagina
		   que contenga el MySQL con la tabla. Luego de actualizar un datos,
		   refrescar sólo una de las pagina y cotejar entre la página actualizada
		   y la página con los datos viejos)

===========================================================================================
==================TEMPLATE=================================================================
===========================================================================================
La template incluye:

-Login (Que puede ser removido) listo
-Pagina principal con menu para navegar (ruteo) listo
-Componente grilla. (listo)
-Componente con Input/Output (listo)
-Servicio (listo)

